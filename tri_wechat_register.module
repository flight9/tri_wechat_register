<?php

//Import Wechat
const USE_TEST_ACCOUNT = true;
require_once 'weichat.class.php';
require_once 'wechat_account_test.php';

const LINKTYPE_PENDING_APPROVAL = 0;
const LINKTYPE_APPROVED = 1;
const LINKTYPE_DENIED = 2;
const USER_STATUS_ACTIVE = 1;
const USER_STATUS_BLOCKED = 0;

header('Content-Type:text/html; charset=utf-8');

/**
 * Implements hook_menu
 */
function tri_wechat_register_menu() {
	$items = array();	
	$items['tri-wechat-register'] =  array(
		'title' => 'Register for Wechat',
		'page callback' => 'tri_wechat_register_page',
		'access arguments' => array('access content'), 
	);
	return $items;
}


/**
 * Implements hook_user_delete()
 */
function tri_wechat_register_user_delete($account) {
	#watchdog('tri_wechat_register', 'del user:'.$account->uid);
	$query = db_delete('wechat_login_user')
		->condition('uid', $account->uid)
		->execute();	
}

/*
 * Implements hook_entity_info()
 */
function tri_wechat_register_entity_info() {
	$info = array();
	$info['tri_wechat_user'] = array(
		'label' => t('Wechat User'),
		'base table' => 'wechat_login_user',
		'entity keys' => array( 
			'id' => 'openid', //pk
			'label' => 'nickname', //entity label
		),
		'uri callback' => 'entity_class_uri',
		'module' => 'tri_wechat_register',
		'entity class' => 'TriWechatUserEntity',
		'controller class' => 'TriWechatUserEntityController',
		'views controller class' => 'EntityDefaultViewsController',
	);
	return $info;
}

/**
 * Page callback
 */
function tri_wechat_register_page() {
	#$ent_user = entity_load('tri_wechat_user',array('ot7Dm0y_ky4WiDzdwuskqtrfE4Ac')); krumo($ent_user);
	
	// new module:check_wechat_auth
	$wc_user = _get_wechat_user();
	
	$chk = _user_have_registered($wc_user);
	if($chk == 'not_registered') {
		//show register form
		return drupal_get_form('tri_wechat_register_form');
	}
	elseif( $chk == 'pending_approval') {
		//TODO: show not_approved
		$content = t('You account has been registed and pending to be approved.');
	} 
	elseif( $chk == 'have_denied') {
		//TODO: show not_approved
		$content = t('Sorry, you account registration has been denied.');
	} 
	else {	//'have_approved'
		//TODO: auto login
		$content = t('You account has been approved. Now we login automatically...');
	}
	
	return $content;
}

/**
 * help function
 */
function _get_wechat_user() {
	//1. 授权回调网页域名 更新。
	//2. 菜单入口更新(包含 appid, redirect_uri)，比如:
	//https://open.weixin.qq.com/connect/oauth2/authorize?appid={wxa4ddad61df39d191}&redirect_uri=http%3A%2F%2F6kaqbc.natappfree.cc%2Ftri-wechat-register&response_type=code&scope=snsapi_userinfo&state=0#wechat_redirect
	
	// 微信浏览器关闭后始终保存 session,所以正式号/测试号切换时不能用 empty($_SESSION[]) 判断
	$last_code = isset($_SESSION['wc_auth_code'])?$_SESSION['wc_auth_code']:'';
	$new_code =	isset($_GET['code'])? $_GET['code']:'';	//drupal_get_query_parameters();
	if(empty($new_code) && empty($last_code)) {
		exit(t('Error: Wrong parameters!'));
	}
	
	if($last_code != $new_code && !empty($new_code)) {		//empty($_POST)
		$wc = new WeiChat(WECHAT_APPID, WECHAT_APPSECRET, WECHAT_TOKEN);
		$wc_user = $wc->getOAuth2UserInfo(false);
		$_SESSION['wc_user'] = $wc_user;
		$_SESSION['wc_auth_code'] = $new_code;
		#krumo('new_code');
	} else {
		$wc_user = $_SESSION['wc_user'];
		#krumo('old_code');
	}
	krumo($wc_user);
	
    return $wc_user;
}

/**
 * help funtion
 */
function _user_have_registered($wc_user) {
	//read wechat_login_user
	$query = db_select('wechat_login_user', 'w');
	$query->join('users', 'u', 'w.uid = u.uid');
	$result = $query->fields('w', array('openid','user_link_type'))
		->fields('u', array('uid', 'status'))
		->condition('openid', $wc_user->openid)
		->execute()->fetch();
	#krumo($result);
	
	if($result === FALSE) {
		return 'not_registered';
	} elseif( $result->user_link_type == LINKTYPE_PENDING_APPROVAL) {
		return 'pending_approval';
	} elseif( $result->user_link_type == LINKTYPE_APPROVED) {
		return 'have_approved';
	} else {
		return 'have_denied';
	}
}


/**
 * Form create
 */
function tri_wechat_register_form($form, &$form_state) {
    $form['username'] = array(
            '#type' => 'textfield',
            '#title' => t('Username'),
            '#description' => t('Your username.'),
            '#required' => TRUE,
    );
    $form['password'] = array(
            '#type' => 'password_confirm',
            '#title' => t('Password'),
            '#description' => t('Your password.'),
            '#required' => TRUE,
    );
    $form['email'] = array(
            '#type' => 'textfield',
            '#title' => t('Email'),
            '#description' => t('Email address.'),
            '#required' => TRUE,
    );
    $form['mobile'] = array(
            '#type' => 'textfield',
            '#title' => t('Mobile'),
            '#description' => t('Mobile phoone number'),
            '#required' => TRUE,
    );
    //Submit
    $form['buttons']['submit'] = array(
            '#type' => 'submit',
            '#value' => t('Register'),
    );
	
    return $form;
}


/**
 * Form validate
 */
function tri_wechat_register_form_validate(&$form, &$form_state) {
    //Necessary validation
	//valid username
	if( $user_error = user_validate_name($form_state['values']['username'])) {
		form_set_error('username', $user_error);
	}
	
	//valid password?
	$re = '/^[a-z0-9_-]{6,18}$/i';
	if( preg_match($re, $form_state['values']['password']) == 0) {
		form_set_error('password', t('Please use a safer password.'));
	}
	
	//valid email
	if( valid_email_address($form_state['values']['email'])===false) {
		form_set_error('email', t('Please input a valid email address.'));
	}
	
	//valid mobile number
	$re = '/(^(13\d|15[^4,\D]|17[13678]|18\d)\d{8}|170[^346,\D]\d{7})$/i';
	if( preg_match($re, $form_state['values']['mobile']) == 0) {
		form_set_error('mobile', t('Please input a valid mobile number.'));
	}
}


/**
 * Form submit
 */
function tri_wechat_register_form_submit(&$form, &$form_state) {
    //create user
	$field_mobile =  array(
		'und' => array(
			0 => array(
				'value' => $form_state['values']['mobile'],
			),
		),
	);
	$fields = array(
		'name' => $form_state['values']['username'],
		'mail' => $form_state['values']['email'],
		'pass' => $form_state['values']['password'],
		'status' => 0,
		'field_mobile' => $field_mobile,
		'init' => $form_state['values']['email'],
		'roles' => array(
			4 => 'wechat authenticated',
		),
	);
	$account = user_save('', $fields);
	#krumo($account); exit;
    
    //save to wechat table(with openid)
	$wc_user = _get_wechat_user();
	_save_wechat_login_user($wc_user, $account->uid);
	
	//redirect
	$form_state['redirect'] = 'TODO';	//show not_approved OR no redirect?
}

/**
 * Help function
 */
function _save_wechat_login_user($wc_user, $uid) {
    $query = db_insert('wechat_login_user')
		->fields(array(
			'openid' => $wc_user->openid,
			'uid' => $uid,
			'user_link_type' => 0,
			'nickname' => $wc_user->nickname,
			'sex' => $wc_user->sex,
			'language' => $wc_user->language,
			'city' => $wc_user->city,
			'province' => $wc_user->province,
			'country' => $wc_user->country,
			'headimgurl' => $wc_user->headimgurl,
		))
		->execute();
}

/**
 * Entity class
 */
class TriWechatUserEntity extends Entity {
	
}

/**
 * Entity controller class
 */
class TriWechatUserEntityController extends EntityAPIController {

}

/*
 * Implements hook_entity_property_info()
 */
function tri_wechat_register_entity_property_info() {
	$info = array();
	$properties = &$info['tri_wechat_user']['properties'];
	
	$properties['openid'] = array(
		'label' => t('Openid'),
		'description' => t('The openid of the wechat user'),
        'type' => 'text',
        'schema field' => 'openid',
	);
	// for RELATIONSHIPS
	$properties['user'] = array(
		'label' => t("TriUser"),
		'type' => 'user',
		'description' => t("The user referenced."),
		'getter callback' => 'entity_metadata_user_get_properties',
		'setter callback' => 'entity_metadata_user_set_properties',
		//'setter permission' => 'administer nodes',
		'required' => TRUE,
		'schema field' => 'uid',
		//'entity views field' => TRUE,
	);
	$properties['user_link_type'] = array(
		'label' => t("User link type"),
		'type' => 'integer',
		'description' => t("Pending, Approved or Denied"),
		'setter callback' => 'entity_property_verbatim_set',
		'options list' => 'tri_wechat_user_user_link_type_get_names',
		'schema field' => 'user_link_type',
	);
	$properties['nickname'] = array(
		'label' => t("Nickname"),
		'type' => 'text',
		'description' => t("Nickname of the user"),
		'schema field' => 'nickname',
	);
	$properties['sex'] = array(
		'label' => t("Sex"),
		'type' => 'integer',
		'description' => t("Gender of the user"),
		'schema field' => 'sex',
	);
	$properties['language'] = array(
		'label' => t("Language"),
		'type' => 'text',
		'description' => t("Language the user using"),
		'schema field' => 'language',
	);
	$properties['city'] = array(
		'label' => t("City"),
		'type' => 'text',
		'description' => t("City the user lives"),
		'schema field' => 'city',
	);
	$properties['province'] = array(
		'label' => t("Province"),
		'type' => 'text',
		'description' => t("Province the user lives"),
		'schema field' => 'province',
	);
	$properties['country'] = array(
		'label' => t("Country"),
		'type' => 'text',
		'description' => t("Country the user lives"),
		'schema field' => 'country',
	);
	$properties['headimgurl'] = array(
		'label' => t("Headimgurl"),
		'type' => 'text',
		'description' => t("Headimgurl of the user."),
		'schema field' => 'headimgurl',
	);
	
	return $info;
}

/*
 * Implements hook_action_info()
 */
function tri_wechat_register_action_info() {
	return array(
		'tri_wechat_register_approve_action' => array(
			'type' => 'entity',
			'label' => t('Authorise user'),
			'behavior' => array('changes_property'),
			'configurable' => FALSE,
			'vbo_configurable' => FALSE,
			'triggers' => array('any'),
			'pass rows' => TRUE,
		),
		'tri_wechat_register_deny_action' => array(
			'type' => 'entity',
			'label' => t('Deny user'),
			'behavior' => array('changes_property'),
			'configurable' => FALSE,
			'vbo_configurable' => FALSE,
			'triggers' => array('any'),
			'pass rows' => TRUE,
		),
	);
}

/**
 * action callback
 */
function tri_wechat_register_approve_action(&$entity, $context) {
	#dsm($entity);
	#dsm($context);
	#dsm($user_wp->getPropertyInfo());
	$user_wp = entity_metadata_wrapper('tri_wechat_user', $entity);
	$user_wp->user_link_type->set(LINKTYPE_APPROVED);
	$user_wp->save();
	
	$tri_user = entity_metadata_wrapper('user', $entity->uid);
	$tri_user->status = USER_STATUS_ACTIVE;
	$tri_user->save();
	
	$to_user = $entity->openid;
	$temp_id = 'cLsTPx-bp2QxOI8RZGorZjAhHSf-INaoYkeekufh75w';	// 认证进度通知
	$link = 'http://kyxg4z.natappfree.cc/node/add/data-entry';
	$data = array(
		'keyword1' => array(
			'value' => '恭喜！您注册的账号已通过审核。',
			'color' => '#173177',
		),
		'keyword2' => array(
			'value' => '您可以从菜单进入，正式使用我们网站提供的服务。',
			'color' => '#173177',
		),
	);
	$wc = new WeiChat(WECHAT_APPID, WECHAT_APPSECRET, WECHAT_TOKEN);
	$ok = $wc->sendTemplateMsg($to_user, $temp_id, $link, $data);
	#dsm($ok);
}

/**
 * action callback
 */
function tri_wechat_register_deny_action(&$entity, $context) {
	$user_wp = entity_metadata_wrapper('tri_wechat_user', $entity);
	$user_wp->user_link_type->set(LINKTYPE_DENIED);
	$user_wp->save();
	
	$tri_user = entity_metadata_wrapper('user', $entity->uid);
	$tri_user->status = USER_STATUS_BLOCKED;
	$tri_user->save();
	
	$to_user = $entity->openid;
	$temp_id = 'cLsTPx-bp2QxOI8RZGorZjAhHSf-INaoYkeekufh75w';	// 认证进度通知
	$link = 'https://app.trifocus.com';
	$data = array(
		'keyword1' => array(
			'value' => '抱歉！您注册的账号未通过审核。',
			'color' => '#173177',
		),
		'keyword2' => array(
			'value' => '请与我们运维联系查明原因，电话:+86 21 6226 9775',
			'color' => '#173177',
		),
	);
	$wc = new WeiChat(WECHAT_APPID, WECHAT_APPSECRET, WECHAT_TOKEN);
	$ok = $wc->sendTemplateMsg($to_user, $temp_id, $link, $data);
	#dsm($ok);
}

/**
 * option list callback
 */
function tri_wechat_user_user_link_type_get_names() {
	return array(
		LINKTYPE_PENDING_APPROVAL => t('Pending approval'),
		LINKTYPE_APPROVED => t('Approved'),
		LINKTYPE_DENIED => t('Denied'),
	);
}